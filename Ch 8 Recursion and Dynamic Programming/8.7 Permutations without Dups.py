""" Cracking the Coding Interview, 6th Edition - Python Solutions
8.7 Permutations without Dups: Write a method to compute all permutations of a string of unique
characters.
"""
import unittest
from unittest import TestCase


def permutations_without_dups(string: str) -> list:
    """ Generate list of all permutations of a string with unique characters.

    Idea:
    - From empty string to n characters, add each character at a time
        - For n characters, permutations can be generated by adding the nth character to all possible locations of all
        permutations of n-1 characters
        Ex. parentheses are used to emphasize pattern
        Permutations of "hi": ("hi"), ("ih")
        Permutations of "hit": ("hit", "hti", "thi"), ("iht", "ith", "tih")

    Complexity:
    - Time: O(N^2 * N!) - there are N! permutations for a N sized string. Outer for loop runs N times. Inner for loop
    runs N times for each N! permutations.
    - Space: O(N!) - store all permutations in the lists

    Approach:
    - Add each character one by one
    - For each new character, add it to every possible location in all existing permutations
    """
    perm_list = [""]
    for char in string:
        new_list = []
        for word in perm_list[:]:
            for index in range(len(word) + 1):
                new_word = word[:index] + char + word[index:]
                new_list.append(new_word)
        perm_list = new_list
    return perm_list


class TestPermutationsWithoutDups(TestCase):
    def testA(self):
        result = permutations_without_dups('hire')
        print(len(result))
        print(result)

    def testB(self):
        result = permutations_without_dups('drink')
        print(len(result))
        print(result)


if __name__ == "__main__":
    unittest.main()